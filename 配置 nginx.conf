user www-data; # 运行 Nginx 进程的用户
worker_processes auto; # 设置 worker 进程的数量为自动，Nginx 会根据 CPU 核心数自动调整
pid /run/nginx.pid; # Nginx master 进程的 PID 文件路径
include /etc/nginx/modules-enabled/*.conf; # 加载启用的模块配置文件

events {
    worker_connections 768; # 每个 worker 进程可以处理的最大并发连接数
    # multi_accept on; # 允许 worker 进程一次性接受多个新的连接，在高并发场景下可以提高效率，但可能导致某些 worker 进程过忙，默认关闭即可
}

http {

    ##
    # Basic Settings
    ##

    sendfile on; # 启用 sendfile 功能，用于高效地传输文件
    tcp_nopush on; # 在 FreeBSD 和 Linux 系统上，与 sendfile 一起使用，尽可能在一个数据包中发送所有头部信息，减少网络延迟
    tcp_nodelay on; # 禁用 Nagle 算法，立即发送较小的数据包，适用于实时性要求高的应用
    types_hash_max_size 2048; # 设置类型哈希表的最大大小
    server_tokens off; # 禁止在错误页面中显示 Nginx 版本信息，提高安全性

    # server_names_hash_bucket_size 64; # 设置服务器名称哈希桶的大小，通常不需要修改
    # server_name_in_redirect off; # 禁止在重定向响应中使用与客户端请求不同的 server_name

    include /etc/nginx/mime.types; # 包含 MIME 类型配置文件
    default_type application/octet-stream; # 默认的 MIME 类型

    ##
    # Logging Settings
    ##

    access_log /var/log/nginx/access.log; # 访问日志路径
    error_log /var/log/nginx/error.log; # 错误日志路径

    ##
    # SSL Settings
    ##

    ssl_protocols TLSv1.2 TLSv1.3; # 仅允许 TLSv1.2 和 TLSv1.3 协议，提高安全性，移除不安全的旧协议
    ssl_prefer_server_ciphers on; # 优先使用服务器端配置的密码套件
    ssl_session_cache shared:SSL:10m; # 设置 SSL 会话缓存，大小为 10MB，用于加速 SSL 连接复用
    ssl_session_timeout 10m; # 设置 SSL 会话超时时间为 10 分钟

    ##
    # Connection Keep-Alive 设置
    ##
    keepalive_timeout 65; # 设置 Keep-Alive 连接的超时时间，单位秒。服务器会等待客户端在此时间内发送后续请求。

    ##
    # Gzip Settings
    ##

    gzip on; # 启用 Gzip 压缩

    gzip_vary on; # 告知代理服务器启用 Gzip 压缩
    gzip_proxied any; # 对所有代理的请求启用 Gzip 压缩
    gzip_comp_level 6; # Gzip 压缩级别，1-9，9 压缩比最高，但消耗更多 CPU 资源，6 是一个平衡值
    gzip_buffers 16 8k; # 设置 Gzip 压缩缓冲区数量和大小
    gzip_http_version 1.1; # 设置进行 Gzip 压缩的 HTTP 最低版本
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml; # 指定需要进行 Gzip 压缩的 MIME 类型

    ##
    # 速率限制设置
    ##
    limit_req_zone $binary_remote_addr zone=mylimit:10m rate=100r/s; # 定义一个名为 mylimit 的速率限制区域，限制每个 IP 每秒 100 个请求

    ##
    # Virtual Host Configs
    ##

    server {
        listen 80; # 监听 80 端口
        server_name api.■■■■■.win; # 域名
        return 301 https://$server_name$request_uri; # 将所有 HTTP 请求重定向到 HTTPS
    }

    server {
        listen 443 ssl http2; # 监听 443 端口，启用 SSL 和 HTTP/2
        server_name api.■■■■■.win; # 域名

        ssl_certificate /etc/letsencrypt/live/api.■■■■■.win/fullchain.pem; # SSL 证书路径
        ssl_certificate_key /etc/letsencrypt/live/api.■■■■■.win/privkey.pem; # SSL 证书私钥路径

        client_max_body_size 20m;  # 允许客户端请求的最大 body 大小为 20MB

        # HSTS (HTTP Strict Transport Security) 设置，强制客户端使用 HTTPS
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # 内容安全策略 (CSP)，增强安全性，防止 XSS 攻击，根据实际需要配置
        # add_header Content-Security-Policy "default-src 'self'";

        # X-Frame-Options，防止 Clickjacking 攻击
        add_header X-Frame-Options "SAMEORIGIN";

        # X-Content-Type-Options，阻止 MIME 类型嗅探
        add_header X-Content-Type-Options "nosniff";

        # X-XSS-Protection，启用浏览器的 XSS 保护
        add_header X-XSS-Protection "1; mode=block";

        location / {
            limit_req zone=mylimit burst=200 nodelay; # 应用名为 mylimit 的速率限制，允许突发 200 个请求，不延迟处理
            proxy_pass http://localhost:3000; # 将请求转发到本地 3000 端口的 API 服务器
            proxy_set_header Host $host; # 将原始请求的 Host 头转发给后端服务器
            proxy_set_header X-Real-IP $remote_addr; # 将客户端真实 IP 地址转发给后端服务器
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 将客户端 IP 地址添加到 X-Forwarded-For 头
            proxy_set_header X-Forwarded-Proto $scheme; # 将客户端请求的协议 (http 或 https) 转发给后端服务器

            # 解决 504 Gateway Time-out 问题相关的超时设置
            proxy_connect_timeout 10s; # 与后端服务器建立连接的超时时间，如果超过这个时间，Nginx 会放弃连接
            proxy_send_timeout 60s; # 向后端服务器发送请求的超时时间，如果超过这个时间，Nginx 会断开连接
            proxy_read_timeout 600s; # 等待后端服务器响应的超时时间，这是解决 504 错误的关键，根据 API 处理时间调整
        }
    }
} 
